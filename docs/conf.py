# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/stable/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import sys
# sys.path.insert(0, os.path.abspath('.'))

import glob
import os.path
import subprocess
import sys

from sphinx.util import logging

from gwin import __version__ as gwin_version

# -- Project information -----------------------------------------------------

project = u'GWIn'
copyright = u'2018, Collin Capano'
author = u'Collin Capano'

# The short X.Y version
version = '{0}.{1}'.format(*gwin_version.split('.'))

# The full version, including alpha/beta/rc tags
release = gwin_version

# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.intersphinx',
    'sphinx.ext.mathjax',
    'sphinx.ext.viewcode',
    'sphinx.ext.napoleon',
    'sphinx.ext.autosummary',
    'sphinxcontrib.programoutput',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = [u'_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'monokai'

# The reST default role (used for this markup: `text`) to use for all
# documents.
default_role = 'obj'

# If true, '()' will be appended to :func: etc. cross-reference text.
add_function_parentheses = True

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'GWIndoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'GWIn.tex', u'GWIn Documentation',
     u'Collin Capano', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'gwin', u'GWIn Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'GWIn', u'GWIn Documentation',
     author, 'GWIn', 'One line description of project.',
     'Miscellaneous'),
]


# -- Extension configuration -------------------------------------------------

# -- intersphinx

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {
    'https://docs.python.org/': None,  # python
    'https://docs.scipy.org/doc/numpy/': None,  # numpy
    'https://docs.scipy.org/doc/scipy/reference/': None,  # scipy
    'http://matplotlib.org/': None,  # matplotlib
    'http://docs.astropy.org/en/stable/': None,  # astropy
    'http://pycbc.org/pycbc/latest/html/': None,  # pycbc
}

# -- autodoc

#autodoc_default_flags = ['show-inheritance', 'members' 'no-inherited-members']

# -- autosummary

autosummary_generate = True

# -- numpydoc

# use blockquotes (numpydoc>=0.8 only)
numpydoc_use_blockquotes = True


# -- run sphinx-apidoc automatically ------------------------------------------
# this is required to have apidoc generated as part of readthedocs builds
# see https://github.com/rtfd/readthedocs.org/issues/1139

def run_apidoc(_):
    """Call sphinx-apidoc
    """
    from sphinx.ext.apidoc import main as apidoc_main
    curdir = os.path.abspath(os.path.dirname(__file__))
    apidir = os.path.join(curdir, 'api')
    module = os.path.join(curdir, os.path.pardir, 'gwin')
    apidoc_main([module, '--separate', '--force', '--output-dir', apidir])


# -- add static files----------------------------------------------------------

def setup_static_content(app):
    # configure stylesheets
    for sdir in html_static_path:
        # add stylesheets
        cssdir = os.path.join(sdir, 'css')
        for cssf in glob.glob(os.path.join(cssdir, '*.css')):
            app.add_stylesheet(cssf.split(os.path.sep, 1)[1])

        # add custom javascript
        jsdir = os.path.join(sdir, 'js')
        for jsf in glob.glob(os.path.join(jsdir, '*.js')):
            app.add_javascript(jsf.split(os.path.sep, 1)[1])


# -- build _includes ----------------------------------------------------------

def build_includes(app):
    """Build extra include files from _includes dir
    """
    logger = logging.getLogger('includes')
    curdir = os.path.abspath(os.path.dirname(__file__))
    incdir = os.path.join(curdir, '_includes')
    for pyf in glob.glob(os.path.join(curdir, '_includes', '*.py')):
        rstfile = pyf.replace('.py', '.rst')
        logger.info('generating {0} from {1}'.format(rstfile, pyf))
        rst = subprocess.check_output([sys.executable, pyf])
        with open(rstfile, 'w') as f:
            f.write(rst)


# -- setup --------------------------------------------------------------------

def setup(app):
    setup_static_content(app)
    app.connect('builder-inited', run_apidoc)
    app.connect('builder-inited', build_includes)
